#! /usr/bin/python

from isis import *
import sys
import os


def checkFile(fileName):
    if(not os.path.isfile(fileName)):
        print "The file " + fileName + " does not exist. Exiting."
        sys.exit(2)

def reg_ana_to_func(image_func, image_ana, reg_prg, rsmpl_prg):
    print "Registration: anatomical image to functional image..."
    os.system(reg_prg + " -ref " + image_func + " -in " + image_ana + " -prealign -trans trans_ana_to_func.nii -smooth 2")
    os.system(rsmpl_prg + " -ref " + image_func + " -in " + image_ana + " -trans trans_ana_to_func.nii -out aligned_ana.v -reso 1")
    os.system("rm trans_ana_to_func.nii")

def reg_ana_to_ref(image_ana,image_ref,reg_prg):
    print "Registration: anatomical image to reference image..."
    os.system(reg_prg + " -ref " + image_ref + " -in " +  image_ana + " -trans trans_to_ref.nii -transform 0 1 2 -optimizer 0 0 2 -prealign -smooth 1")

def reg_func_to_ref(image_ana,image_ref,reg_prg):
    print "Registration: functional image to reference image..."
    os.system(reg_prg + " -ref " + image_ref + " -in " +  image_func + " -trans trans_to_ref.nii -transform 0 2 -optimizer 0 2 -prealign -smooth 2 -bound 15")

def resample_func_to_ref(image_func, image_ref, rsmpl_prg, image_out):
    print "Resampling: functional image to reference image..."
    os.system(rsmpl_prg + " -ref " + image_ref + " -in " + image_func + " -trans trans_to_ref.nii -out " + image_out + " -reso 3 -fmri")

def resample_ana_to_ref(image_ana, image_ref, rsmpl_prg, image_out):
    print "Resampling: anatomical image to reference image..."
    os.system(rsmpl_prg + " -ref " + image_ref + " -in " + image_ana + " -trans trans_to_ref.nii -out " + image_out)

if __name__ == '__main__':
    reg_prg = "/usr/bin/valign3d"
    rsmpl_prg = "/usr/bin/vdotrans3d"
    ref_ana = "/usr/share/lipsia/mni.v"
    ref_func = "/usr/share/lipsia/epi_template_3mm.v"

    app = core.Application("vnormalization")
    app.addParameter("out","","string")
    app.setDescription("out","The output image")
    app.setNeeded("out", True)
    app.addParameter("fun","","string")
    app.setDescription("fun", "The functional image")
    app.addParameter("ana","","string")
    app.setDescription("ana","The anatomical image")
    app.addParameter("ref","/usr/share/lipsia/mni.v","string")
    app.setDescription("ref", "The reference image.")
    app.init(len(sys.argv),sys.argv, True)
    
    checkFile(reg_prg)
    checkFile(rsmpl_prg)
    image_ana = app.getParameterAsString("ana")
    image_func = app.getParameterAsString("fun")
    image_ref = app.getParameterAsString("ref")
    image_out = app.getParameterAsString("out") 

    checkFile(image_ref)

    if(image_ana != ""):
        checkFile(image_ana)
        checkFile(ref_ana)
    else:
        if(image_ref == ref_ana):
            print "No reference image specified. Taking " + ref_func
            image_ref = ref_func
    if(image_func != ""):
        checkFile(image_func)
        checkFile(ref_func)
    if(image_func == "" and image_ana == ""):
        print "You must either specify an anatomical, a functional or both images. Exiting."
        sys.exit(2)
    if(image_func != "" and image_ana != ""):
        reg_ana_to_func(image_func, image_ana, reg_prg, rsmpl_prg)
        image_ana = "aligned_ana.v"
    if(image_ana != ""):
        reg_ana_to_ref(image_ana,image_ref,reg_prg)
    else:
        reg_func_to_ref(image_func, image_ref, reg_prg)
    if(image_func != ""):
        resample_func_to_ref(image_func, image_ref, rsmpl_prg, image_out)
    else:
        resample_ana_to_ref(image_ana, image_ref, rsmpl_prg, image_out)

        
    os.system("rm trans_to_ref.nii")

